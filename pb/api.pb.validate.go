// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/api.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterCarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCarRequestMultiError, or nil if none found.
func (m *RegisterCarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _RegisterCarRequest_Type_InLookup[m.GetType()]; !ok {
		err := RegisterCarRequestValidationError{
			field:  "Type",
			reason: "value must be in list [Sedan Van Suv motor-bike]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := RegisterCarRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RegisterCarRequest_Color_InLookup[m.GetColor()]; !ok {
		err := RegisterCarRequestValidationError{
			field:  "Color",
			reason: "value must be in list [red green blue]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSpeedRange(); val < 0 || val > 240 {
		err := RegisterCarRequestValidationError{
			field:  "SpeedRange",
			reason: "value must be inside range [0, 240]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if _, ok := _RegisterCarRequest_Features_InLookup[item]; !ok {
			err := RegisterCarRequestValidationError{
				field:  fmt.Sprintf("Features[%v]", idx),
				reason: "value must be in list [sunroof panorama auto-parking surround-system]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegisterCarRequestMultiError(errors)
	}
	return nil
}

// RegisterCarRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterCarRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterCarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCarRequestMultiError) AllErrors() []error { return m }

// RegisterCarRequestValidationError is the validation error returned by
// RegisterCarRequest.Validate if the designated constraints aren't met.
type RegisterCarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCarRequestValidationError) ErrorName() string {
	return "RegisterCarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCarRequestValidationError{}

var _RegisterCarRequest_Type_InLookup = map[string]struct{}{
	"Sedan":      {},
	"Van":        {},
	"Suv":        {},
	"motor-bike": {},
}

var _RegisterCarRequest_Color_InLookup = map[string]struct{}{
	"red":   {},
	"green": {},
	"blue":  {},
}

var _RegisterCarRequest_Features_InLookup = map[string]struct{}{
	"sunroof":         {},
	"panorama":        {},
	"auto-parking":    {},
	"surround-system": {},
}

// Validate checks the field values on GetCarRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCarRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCarRequestMultiError, or
// nil if none found.
func (m *GetCarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetCarRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCarRequestMultiError(errors)
	}
	return nil
}

func (m *GetCarRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCarRequestMultiError is an error wrapping multiple validation errors
// returned by GetCarRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCarRequestMultiError) AllErrors() []error { return m }

// GetCarRequestValidationError is the validation error returned by
// GetCarRequest.Validate if the designated constraints aren't met.
type GetCarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCarRequestValidationError) ErrorName() string { return "GetCarRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCarRequestValidationError{}

// Validate checks the field values on ListCarsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCarsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCarsRequestMultiError, or nil if none found.
func (m *ListCarsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCarsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetType() != "" {

		if _, ok := _ListCarsRequest_Type_InLookup[m.GetType()]; !ok {
			err := ListCarsRequestValidationError{
				field:  "Type",
				reason: "value must be in list [Sedan Van Suv motor-bike]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetColor() != "" {

		if _, ok := _ListCarsRequest_Color_InLookup[m.GetColor()]; !ok {
			err := ListCarsRequestValidationError{
				field:  "Color",
				reason: "value must be in list [red green blue]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetName() != "" {

	}

	if m.GetSpeedRange() != 0 {

		if val := m.GetSpeedRange(); val < 0 || val > 240 {
			err := ListCarsRequestValidationError{
				field:  "SpeedRange",
				reason: "value must be inside range [0, 240]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListCarsRequestMultiError(errors)
	}
	return nil
}

// ListCarsRequestMultiError is an error wrapping multiple validation errors
// returned by ListCarsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCarsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCarsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCarsRequestMultiError) AllErrors() []error { return m }

// ListCarsRequestValidationError is the validation error returned by
// ListCarsRequest.Validate if the designated constraints aren't met.
type ListCarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCarsRequestValidationError) ErrorName() string { return "ListCarsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCarsRequestValidationError{}

var _ListCarsRequest_Type_InLookup = map[string]struct{}{
	"Sedan":      {},
	"Van":        {},
	"Suv":        {},
	"motor-bike": {},
}

var _ListCarsRequest_Color_InLookup = map[string]struct{}{
	"red":   {},
	"green": {},
	"blue":  {},
}

// Validate checks the field values on CarResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CarResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CarResponseMultiError, or
// nil if none found.
func (m *CarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Color

	// no validation rules for SpeedRange

	if len(errors) > 0 {
		return CarResponseMultiError(errors)
	}
	return nil
}

// CarResponseMultiError is an error wrapping multiple validation errors
// returned by CarResponse.ValidateAll() if the designated constraints aren't met.
type CarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarResponseMultiError) AllErrors() []error { return m }

// CarResponseValidationError is the validation error returned by
// CarResponse.Validate if the designated constraints aren't met.
type CarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarResponseValidationError) ErrorName() string { return "CarResponseValidationError" }

// Error satisfies the builtin error interface
func (e CarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarResponseValidationError{}

// Validate checks the field values on CarsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CarsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CarsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CarsResponseMultiError, or
// nil if none found.
func (m *CarsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CarsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CarsResponseValidationError{
						field:  fmt.Sprintf("Cars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CarsResponseValidationError{
						field:  fmt.Sprintf("Cars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CarsResponseValidationError{
					field:  fmt.Sprintf("Cars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CarsResponseMultiError(errors)
	}
	return nil
}

// CarsResponseMultiError is an error wrapping multiple validation errors
// returned by CarsResponse.ValidateAll() if the designated constraints aren't met.
type CarsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarsResponseMultiError) AllErrors() []error { return m }

// CarsResponseValidationError is the validation error returned by
// CarsResponse.Validate if the designated constraints aren't met.
type CarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarsResponseValidationError) ErrorName() string { return "CarsResponseValidationError" }

// Error satisfies the builtin error interface
func (e CarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarsResponseValidationError{}
