// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pb/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	// Add a new car
	RegisterCar(ctx context.Context, in *RegisterCarRequest, opts ...grpc.CallOption) (*CarResponse, error)
	// Get a single car resource with the given ID
	GetCarByID(ctx context.Context, in *GetCarRequest, opts ...grpc.CallOption) (*CarResponse, error)
	// List all cars
	ListCars(ctx context.Context, in *ListCarsRequest, opts ...grpc.CallOption) (*CarsResponse, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) RegisterCar(ctx context.Context, in *RegisterCarRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, "/cars.v1.CarService/RegisterCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCarByID(ctx context.Context, in *GetCarRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, "/cars.v1.CarService/GetCarByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) ListCars(ctx context.Context, in *ListCarsRequest, opts ...grpc.CallOption) (*CarsResponse, error) {
	out := new(CarsResponse)
	err := c.cc.Invoke(ctx, "/cars.v1.CarService/ListCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations should embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	// Add a new car
	RegisterCar(context.Context, *RegisterCarRequest) (*CarResponse, error)
	// Get a single car resource with the given ID
	GetCarByID(context.Context, *GetCarRequest) (*CarResponse, error)
	// List all cars
	ListCars(context.Context, *ListCarsRequest) (*CarsResponse, error)
}

// UnimplementedCarServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) RegisterCar(context.Context, *RegisterCarRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCar not implemented")
}
func (UnimplementedCarServiceServer) GetCarByID(context.Context, *GetCarRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByID not implemented")
}
func (UnimplementedCarServiceServer) ListCars(context.Context, *ListCarsRequest) (*CarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCars not implemented")
}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_RegisterCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).RegisterCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.v1.CarService/RegisterCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).RegisterCar(ctx, req.(*RegisterCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCarByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.v1.CarService/GetCarByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarByID(ctx, req.(*GetCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_ListCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).ListCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cars.v1.CarService/ListCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).ListCars(ctx, req.(*ListCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cars.v1.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCar",
			Handler:    _CarService_RegisterCar_Handler,
		},
		{
			MethodName: "GetCarByID",
			Handler:    _CarService_GetCarByID_Handler,
		},
		{
			MethodName: "ListCars",
			Handler:    _CarService_ListCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api.proto",
}
